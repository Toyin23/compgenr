#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass tufte-book
\begin_preamble
\usepackage{epigraph}
\end_preamble
\use_default_options true
\begin_modules
knitr
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<setup, include=FALSE, cache=FALSE>>= 
\end_layout

\begin_layout Plain Layout

library(knitr) 
\end_layout

\begin_layout Plain Layout

options(replace.assign=TRUE,width=50) 
\end_layout

\begin_layout Plain Layout

opts_chunk$set(fig.path='figure/graphics-', cache.path='cache/graphics-',
 fig.align='center', dev='pdf', fig.width=5, fig.height=5, fig.show='hold',
 cache=TRUE, par=TRUE) 
\end_layout

\begin_layout Plain Layout

knit_hooks$set(small.mar=function(before, options, envir){ 
\end_layout

\begin_layout Plain Layout

if(before && options$fig.show!='none'){par(mar=c(3,2,3,.1), cex.lab=1.5,cex.axis=1.5,m
gp=c(3,.7,0),tcl=-.3) }}, crop=hook_pdfcrop) 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Computational genomics and R
\end_layout

\begin_layout Section
Computational Genomics
\end_layout

\begin_layout Standard
The aim of computational genomics is to do biological interpretation of
 high dimensional genomics data.
 Generally speaking, it is similar to any other kind of data analysis but
 often times doing computational genomics will require domain specific knowledge
 and tools.
 The tasks of computational genomics can be roughly summarized as in Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Computational-genomics-(rough)"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename nonR_figures/dataAnalysis.pdf
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Computational genomics (rough) flowchart
\begin_inset CommandInset label
LatexCommand label
name "fig:Computational-genomics-(rough)"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the time, the analysis starts with the raw data (if you are somehow
 served with already processed data, consider yourself lucky).
 The raw data could be image files from a microarray, or text files from
 a sequencer.
 That means the analysis starts with processing the data to a manageable
 format.
 This processing includes data munging which is transforming the data from
 one format to another, data point transformations such as normalizing and
 log-transformations, and filtering and removing data points with specific
 thresholds.
 For example, you may want to remove data points that have unreliable measuremen
ts or missing values.
 The next step is to apply supervised/unsupervised learning algorithms to
 test the hypothesis that lead to experiments that generated the data.
 This step also includes quality checks about your data.
 Another important thing to do is to annotate and visualize your data.
 For example, after finding transcription factor binding sites using data
 from ChIP-seq experiments, you would like to see what kind of genes they
 are nearby or what kind of other genomic features they overlap with.
 Do they overlap with promoters or they are distal? You may also like to
 see your binding sites on the genome or make a summary plot showing distances
 to nearest transcriptions start sites.
 All of this tasks can be classified as visualization and annotation tasks.
 All of these steps should hopefully lead you to the holy grail which is
 biological interpretation of the data and hopefully to some new insights
 about genome biology.
\end_layout

\begin_layout Section
What can you do with R?
\end_layout

\begin_layout Standard
The tasks that are descrived above can be accomplished by R.
 R is not only a powerful statistical programming language but also go-to
 data analysis tool for many computational genomics experts.
 High-dimensional genomics datasets are usually suitable to be analyzed
 with core R packages and functions.
 On top of that, Bioconductor and CRAN have an array of specialized tools
 for doing genomics specific analysis.
 
\end_layout

\begin_layout Standard
Here is a list of computational genomics tasks that can be completed using
 R.
\end_layout

\begin_layout Subsection
Data munging (pre-processing)
\end_layout

\begin_layout Standard
Often times, the data will not come in ready to analyze format.
 You may need to convert it to other formats by transforming data points
 (such as log transforming, normalizing etc), or remove columns/rows that
 , or remove data points with empty values and, and subset the data set
 with some arbitrary condition.
 Most of these tasks can be achieved using R.
 In addition, with the help of packages R can connect to databases in various
 formats such as mySQL, mongoDB, etc., and query and get the data to R environmen
t using database specific tools.
 Unfortunately, not all data muging and processing tasks can be accomplished
 only by R.
 At times, you may need to use domain specific software or software dealing
 better with specific type of data sets.
 For example, R is not great at dealing with character strings, if you are
 trying to filter a large dataset based on some regular expression you may
 be better of with perl or awk.
 
\end_layout

\begin_layout Subsection
General data analysis and exploration
\end_layout

\begin_layout Standard
Most genomics data sets are suitable for application of general data analysis
 tools.
 In some cases, you may need to preprocess the data to get it to a state
 that is suitable for application such tools.
\end_layout

\begin_layout Itemize
unsupervised data analysis: clustering (k-means, hierarchical), matrix factoriza
tion (PCA, ICA etc)
\end_layout

\begin_layout Itemize
supervised data analysis: generalized linear models, support vector machines,
 randomForests
\end_layout

\begin_layout Subsection
Visualization
\end_layout

\begin_layout Standard
Visualization is an important part of all data analysis techniques including
 computational genomics.
 Again, you can use core visualization technniques in R and also genomics
 specific ones with the help of specific packages.
\end_layout

\begin_layout Itemize
Basic plots: Histograms, scatter plots, bar plots, box plots
\end_layout

\begin_layout Itemize
ideograms and circus plots for genomics
\end_layout

\begin_layout Itemize
heatmaps
\end_layout

\begin_layout Itemize
meta-profiles of genomic features, read enrichment over all promoters
\end_layout

\begin_layout Itemize
genomic track visualization for given locus
\end_layout

\begin_layout Subsection
Dealing with genomic intervals
\end_layout

\begin_layout Standard
Most of the genomics data come in a tabular format that contains the location
 in the genome and some other relevant values, such as scores for those
 genomic features and/or names.
 R/Bioconductor has dedicated methods to deal with such data.
 Here are a couple of example tasks that you can achieve using R.
\end_layout

\begin_layout Itemize
Overlapping CpG islands with transcription start sites, and filtering based
 on overlaps
\end_layout

\begin_layout Itemize
Aligning reads and making read enrichment profiles
\end_layout

\begin_layout Itemize
Overlapping aligned reads with exons and counting aligned reads per gene
\end_layout

\begin_layout Subsection
Application of other bioinformatics specific algorithms
\end_layout

\begin_layout Standard
In addition to genomic interval centered methods, R/Bioconductor gives you
 access to multitude of other bioinformatics specific algorithms.
 Here are some of the things you can do.
 
\end_layout

\begin_layout Itemize
Sequence analysis: TF binding motifs, GC content and CpG counts of a given
 DNA sequence
\end_layout

\begin_layout Itemize
Differential expression (or arrays and sequencing based measurements)
\end_layout

\begin_layout Itemize
Gene set/Pathway analysis: What kind of genes are enriched in my gene set
\end_layout

\end_body
\end_document
