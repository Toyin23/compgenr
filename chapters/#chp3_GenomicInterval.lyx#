#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass tufte-book
\use_default_options true
\begin_modules
knitr
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<setup, include=FALSE, cache=FALSE>>= 
\end_layout

\begin_layout Plain Layout

library(knitr) 
\end_layout

\begin_layout Plain Layout

options(replace.assign=TRUE,width=50) 
\end_layout

\begin_layout Plain Layout

opts_chunk$set(fig.path='figure/graphics-', cache.path='cache/graphics-',
 fig.align='center', dev='pdf', fig.width=5, fig.height=5, fig.show='hold',
 cache=TRUE, par=TRUE) 
\end_layout

\begin_layout Plain Layout

knit_hooks$set(small.mar=function(before, options, envir){ 
\end_layout

\begin_layout Plain Layout

if(before && options$fig.show!='none'){par(mar=c(3,2,3,.1), cex.lab=1.5,cex.axis=1.5,m
gp=c(3,.7,0),tcl=-.3) }}, crop=hook_pdfcrop) 
\end_layout

\begin_layout Plain Layout

read_chunk('chp3_chunks.R')
\end_layout

\begin_layout Plain Layout

@
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Operating on Genomic Intervals 
\end_layout

\begin_layout Standard
A considerable time in computational genomics is spent on overlapping different
 features of the genome.
 For example, you may want to overlap transcription factor binding sites
 with CpG islands or promoters to quantify what percentage of binding sites
 overlap with your regions of interest.
 Overlapping mapped reads from high-throughput sequencing experiments with
 genomic features such as exons, promoters, enhancers can also be classfied
 as operations on genomic intervals.
 You can think of a million other ways that involves overlapping two sets
 of different features on the genome.
 This chapter aims to show how to do analysis involving operations on genomic
 intervals.
\end_layout

\begin_layout Section
Operations on Genomic Intervals with GenomicRanges package
\end_layout

\begin_layout Standard
Bioconductor project has a dedicated package called GenomicRanges to deal
 with genomic intervals.
 In this section, we will provide use cases involving operations on genomic
 intervals.
 The main reason we will stick to this package is that it provides tools
 to do overlap operations.
 However package requires that users operate on specific data types that
 are conceptually similar to a tabular data structure implemented in a way
 that makes overlapping and related operations easier.
 The main object we will be using is called 
\emph on
GRanges
\emph default
 object and we will also see some other related objects from the GenomicRanges
 package.
\end_layout

\begin_layout Subsection
How to create and manipulate a GRanges object
\end_layout

\begin_layout Standard
GRanges (from GenomicRanges package) is the main object that holds the genomic
 intervals and extra information about those intervals.
 Here we will show how to create one.
 Conceptually, it is similar to a data frame and some operations such as
 using 
\emph on
[]
\emph default
 notation to subset the table will work also on GRanges, but keep in mind
 that not everything that works for data frames will work on 
\emph on
GRanges
\emph default
 objects.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<createGR>>=
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As you can see it looks a bit like a data frame.
 Also, note that the peculiar second argument 
\begin_inset Quotes eld
\end_inset

ranges
\begin_inset Quotes erd
\end_inset

 which basically contains start and end positions of the genomic intervals.
 However, you can not just give start and end positions you actually have
 to provide another object of 
\emph on
IRanges.
 
\emph default
Do not let this confuse you, GRanges actually depends on another object
 that is very similar to itself called IRanges and you have to provide the
 
\begin_inset Quotes eld
\end_inset

ranges
\begin_inset Quotes erd
\end_inset

 argument as an IRanges object.
 In its simplest for, an IRanges object can be construcuted by providing
 start and end positions to IRanges() function.
 Think of it as something you just have to provide in order to construct
 the GRanges object.
\end_layout

\begin_layout Standard
GRanges can also contain other information about the genomic interval such
 as scores, names, etc.
 You can provide extra information at the time of the construction or you
 can add it later.
 Here is how you can do those:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<createGRwMetadata>>=
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Getting genomic regions into R as GRanges objects
\end_layout

\begin_layout Standard
There are multiple ways you can read in your genomic features into R and
 create a GRanges object.
 Most genomic interval data comes as a tabular format that has the basic
 information about the location of the interval and some other information.
 We already showed how to read BED files as data frame.
 Now we will show how to convert it to GRanges object.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<convertDataframe2gr>>=
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Reading the genomic features as text files and converting to GRanges is
 not the only way to create GRanges object.
 With the help of 
\emph on
rtracklayer
\emph default
 package we can directly import 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<importbed_rtracklayer>>=
\end_layout

\begin_layout Plain Layout

# using rtracklayer to import genomic features
\end_layout

\begin_layout Plain Layout

# from flat files
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now we will show how to use other packages to automatically obtain the data
 in GRanges format.
 But you will not be able to use these methods for every data set so it
 is good to now how to read data from flat files as well.
 First, we will use rtracklayer package to download data from UCSC browser.
 We will download CpG islands as GRanges objects.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<importFromUCSC>>=
\end_layout

\begin_layout Plain Layout

# using rtracklayer to import genomic features
\end_layout

\begin_layout Plain Layout

# from UCSC browser
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next, we will show how to use GenomicFeatures package 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<genomicFeaturesImport>>=
\end_layout

\begin_layout Plain Layout

# using GenomicFeatures to import genomic features
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Finding regions that (does/does not) overlap with another set of regions
\end_layout

\begin_layout Standard
This is one of the most common tasks in genomics.
 Usually, you have a set of regions that you are interested in and you want
 to see if they overlap with another set of regions or see how many of them
 overlap.
 A good example is transcription factor binding sites determined by ChIP-seq
 experiments.
 In these types of experiments and followed analysis, one usually ends up
 with genomic regions that are enriched in bound transcription factors (sites
 of transcription factor binding) and the 
\end_layout

\begin_layout Standard
subsetByOverlaps
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<subsetByOverlaps>>=
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
countOverlaps
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<countOverlaps>>=
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
findOverlaps and its uses
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<findOverlaps>>=
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
find nearest
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<findNearest>>=
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Finding coverage of intervals over the genome
\end_layout

\begin_layout Standard
find cannonical binding sites
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<findCanonical>>=
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
find coverage of biding sites on promoters
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<cannonicalCoverage>>=
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
sdsd
\end_layout

\begin_layout Section
Dealing with high-throughput sequencing reads
\end_layout

\begin_layout Standard
In recent years, advances in sequencing technology helped researchers sequence
 the genome deeper than ever.
 The reads from sequencing machines are usually aligned to the genome and
 the next task is to quantify the enrichment of those aligned reads in the
 regions of interest.
 You may want to count how many reads overlapping with your promoter set
 of interest or you may want to quantify RNA-seq reads overlapping with
 exons.
 This is similar to operations on genomic intervals which are described
 previously.
 If you can read all your alignments into the memory and create a 
\emph on
GRanges 
\emph default
object, you can apply the previously described operations.
 However, most of the time we can not read all mapped reads into the memory,
 so we have to use specialized tools to query and quantify alignments on
 a given set of regions.
 One of the most common alignment formats is SAM/BAM format, most aligners
 will produce SAM/BAM output or you will be able to convert your specific
 alignment format to SAM/BAM format.
 BAM format is binary version of the human readable SAM format.
 SAM format have specific columns that contain different kind of information
 about the aligment such as mismatches, qualities etc.
 (see 
\begin_inset Foot
status open

\begin_layout Plain Layout
http://samtools.sourceforge.net/SAM1.pdf
\end_layout

\end_inset

 for SAM format specification).
\end_layout

\begin_layout Subsection
Quality check on sequencing reads and mapping reads to the genome
\end_layout

\begin_layout Standard
For a long time, quality check and mapping were tasks outside the R domain.
 However, certain packages in Bioconductor currently can deal with those
 tasks.
 Although, we will not go into detail we will mention some packages that
 can help with quality check and mapping.
 
\end_layout

\begin_layout Standard
Read quality checking is possible with Bioconductor packages: 
\emph on
qcrc
\emph default
, 
\emph on
Rsubread
\emph default
 and 
\emph on
QuasR.
 
\emph default
All the packages seem to have interface to C for fast quality score calculations
 or I/O operations.
 For the read mapping, 
\emph on
QuasR
\emph default
 uses 
\emph on
Rbowtie
\emph default
 package and produces BAM files (see below for short intro on BAM) and Rsubread
 employs its own mapping algorithm and can also produce BAM files.
 
\end_layout

\begin_layout Subsection
Counting mapped reads for a set of regions
\end_layout

\begin_layout Standard

\emph on
Rsamtools 
\emph default
package has functions to query BAM files.
 The function we will use in the first example is 
\emph on
countBam
\emph default
 which takes input of the BAM file and param argument.
 
\begin_inset Quotes eld
\end_inset


\emph on
param
\emph default

\begin_inset Quotes erd
\end_inset

 argument takes a ScanBamParam object.
 The object is returned by 
\emph on
ScanBamParam()
\emph default
 function and contains parameters for scanning the BAM file.
 The example below is a simple example and ScanBamParam() only includes
 regions of interest.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<count_reads, messages=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(Rsamtools)
\end_layout

\begin_layout Plain Layout

# locate the BAM file in the examples directory of the package
\end_layout

\begin_layout Plain Layout

fl<-system.file("extdata","ex1.bam", package="Rsamtools",mustWork=TRUE)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# regions of interest
\end_layout

\begin_layout Plain Layout

gwhich=GRanges(seqnames=c("seq2","seq1","seq2"),ranges=IRanges(c(100,1000,1000),
c(1000,2000,2000)) )
\end_layout

\begin_layout Plain Layout

# count reads by querying the bam file
\end_layout

\begin_layout Plain Layout

countBam(fl, param=ScanBamParam(which=gwhich))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Alternatively, aligned reads can be read in using GenomicRanges package
 (which on this occasion relies on RSamtools package).
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section
Dealing with continous scores over the genome
\end_layout

\begin_layout Standard
Most high-througput data can be viewed as a continous score over the bases
 of the genome.
\end_layout

\begin_layout Section
Session Info
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

sessionInfo()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section
Acknowledgements
\end_layout

\begin_layout Standard
Chapter is initated by Altuna Akalin
\end_layout

\end_body
\end_document
